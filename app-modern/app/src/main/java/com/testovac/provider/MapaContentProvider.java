package com.testovac.provider;

import static android.content.ContentResolver.SCHEME_CONTENT;
import static com.testovac.provider.Defaults.ALL_COLUMNS;
import static com.testovac.provider.Defaults.AUTOGENERATED_ID;
import static com.testovac.provider.Defaults.NO_CONTENT_OBSERVER;
import static com.testovac.provider.Defaults.NO_GROUP_BY;
import static com.testovac.provider.Defaults.NO_HAVING;
import static com.testovac.provider.Defaults.NO_NULL_COLUMN_HACK;
import static com.testovac.provider.Defaults.NO_SELECTION;
import static com.testovac.provider.Defaults.NO_SELECTION_ARGS;
import static com.testovac.provider.Defaults.NO_TYPE;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;

import com.testovac.MainActivity;

public class MapaContentProvider extends ContentProvider {
	public static final String AUTHORITY = "com.testovac.provider.MapaContentProvider";

	public static final Uri CONTENT_URI = new Uri.Builder()
			.scheme(SCHEME_CONTENT)
			.authority(AUTHORITY)
			.appendPath(Provider.Mapa.TABLE_NAME)
			.build();

	private static final int URI_MATCH_MAPA = 0;
	private static final int URI_MATCH_STATS_ARRAYS = 1;
	private static final int URI_MATCH_MAPA_WITH_ID = 2;

	private static final String MIME_TYPE_MAPA = ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + "." + Provider.Mapa.TABLE_NAME;
	private static final String MIME_TYPE_STATS_ARRAY = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + Provider.Mapa.TABLE_NAME;

	private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

	private DatabaseOpenHelper databaseHelper;

	@Override
	public boolean onCreate() {
		uriMatcher.addURI(AUTHORITY, Provider.Mapa.TABLE_NAME, URI_MATCH_MAPA);
		uriMatcher.addURI(AUTHORITY, Provider.Mapa.TABLE_NAME + "/statsArrays", URI_MATCH_STATS_ARRAYS);
		uriMatcher.addURI(AUTHORITY, Provider.Mapa.TABLE_NAME + "/#", URI_MATCH_MAPA_WITH_ID);

		this.databaseHelper = new DatabaseOpenHelper(getContext());
		return true;
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection,
	                    String[] selectionArgs, String sortOrder) {
		Cursor cursor = null;
		switch (uriMatcher.match(uri)) {
			case URI_MATCH_MAPA:
				System.out.println("Map Content matchujem celu tabulku");
				cursor = listCelaMapaTabulka();
				cursor.setNotificationUri(getContext().getContentResolver(), uri);
				return cursor;
			case URI_MATCH_STATS_ARRAYS:
				System.out.println("matchujem vsetky statsArrays");
				cursor = listVsetkyStatsArrays();
				cursor.setNotificationUri(getContext().getContentResolver(), uri);
				return cursor;
			default:
				return Defaults.NO_CURSOR;
		}
	}

	private Cursor listVsetkyStatsArrays() {
		SQLiteDatabase db = databaseHelper.getReadableDatabase();
		return db.query(Provider.Mapa.TABLE_NAME, ALL_COLUMNS, Provider.Mapa.KEY + "='statsArray'", NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, Provider.Mapa._ID + " ASC");
	}

//    private Cursor findByTopID() {
//        SQLiteDatabase db = databaseHelper.getReadableDatabase();
//        return db.query(Provider.Mapa.TABLE_NAME, ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, Provider.Mapa._ID + " DESC LIMIT 1");
//    }

	private Cursor listCelaMapaTabulka() {
		SQLiteDatabase db = databaseHelper.getReadableDatabase();
		return db.query(Provider.Mapa.TABLE_NAME, ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, Provider.Mapa._ID + " ASC");
	}

	@Override
	public Uri insert(Uri uri, ContentValues values) {
		switch (uriMatcher.match(uri)) {
			case URI_MATCH_MAPA:
				Uri newItemUri = insertKeyValue(values);
				getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
				return newItemUri;
			default:
				return Defaults.NO_URI;
		}
	}

	private Uri insertKeyValue(ContentValues values) {
		ContentValues note = new ContentValues();
		note.put(Provider.Mapa._ID, AUTOGENERATED_ID);
		note.put(Provider.Mapa.KEY, values.getAsString(Provider.Mapa.KEY));
		note.put(Provider.Mapa.VALUE, values.getAsString(Provider.Mapa.VALUE));

		SQLiteDatabase db = databaseHelper.getWritableDatabase();
		long newId = db.insert(Provider.Mapa.TABLE_NAME, NO_NULL_COLUMN_HACK, note);
		return ContentUris.withAppendedId(CONTENT_URI, newId);
	}


	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {
		switch (uriMatcher.match(uri)) {
			case URI_MATCH_STATS_ARRAYS:
				String key = MainActivity.STATS_ARRAY_KEY;
				int affectedRows = databaseHelper.getWritableDatabase().delete(Provider.Mapa.TABLE_NAME, Provider.Mapa.KEY + " = '" + key + "'", Defaults.NO_SELECTION_ARGS);
				System.out.println("vymazanych riadkov: " + affectedRows);
				getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
				return affectedRows;
			default:
				return 0;
		}
	}

	@Override
	public String getType(Uri uri) {
		switch (uriMatcher.match(uri)) {
			case URI_MATCH_STATS_ARRAYS:
				return MIME_TYPE_STATS_ARRAY;
			case URI_MATCH_MAPA:
				return MIME_TYPE_MAPA;
		}
		return NO_TYPE;
	}


	@Override
	public int update(Uri uri, ContentValues values, String selection,
	                  String[] selectionArgs) {
		switch (uriMatcher.match(uri)) {
			case URI_MATCH_MAPA_WITH_ID:
				long id = ContentUris.parseId(uri);
				int affectedRows = databaseHelper.getWritableDatabase()
						.update(Provider.Mapa.TABLE_NAME,
								values,
								Provider.Mapa._ID + "=" + id,
								NO_SELECTION_ARGS);
				System.out.println("MapaContentProvider updated: " + Provider.Mapa.KEY + "=" + values.getAsInteger(Provider.Mapa.VALUE));
				// pri update netreba refreshovat vsetko
				//getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
				return affectedRows;
//            case URI_MATCH_STATS_NO_NOTIFY:
//                List<String> pathSegments = uri.getPathSegments();
//                long idcko = Integer.parseInt(pathSegments.get(2));
//                int affectedRows2 = databaseHelper.getWritableDatabase()
//                        .update(Provider.Mapa.TABLE_NAME,
//                                values,
//                                Provider.Mapa._ID + "=" + idcko,
//                                NO_SELECTION_ARGS);
//                System.out.println("MapaContentProvider(noNotify): " + idcko + "=" + values.getAsInteger(Provider.Statistika.STATS));
//                //getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
//                return affectedRows2;
			default:
				return 0;
		}
	}

//        private Uri updateStat(ContentValues values) {
//        ContentValues note = new ContentValues();
//        note.put(Provider.Statistika.STATS, note.getAsInteger(Provider.Statistika.STATS));
//
//        SQLiteDatabase db = databaseHelper.getWritableDatabase();
//        long newId = db.update(Provider.Statistika.TABLE_NAME,note,Provider.Statistika._ID+"="+values.getAsInteger(Provider.Statistika.STATS),)
//        return ContentUris.withAppendedId(CONTENT_URI, newId);
//    }
}
